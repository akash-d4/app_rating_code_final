# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-AkGd7Rj0iE3BdMjqxgNi3jpVi-vZz8z
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import pytz

# Assuming 'apps_data' is the DataFrame containing the app data
# The DataFrame should have columns like 'category', 'avg_rating', 'install_size', 'review_count', 'last_update'

# Filter the data
def filter_data(df):
    # Convert last_update to datetime
    df['last_update'] = pd.to_datetime(df['last_update'], errors='coerce')

    # Filter out categories with avg_rating below 4.0 and install size below 10M
    df_filtered = df[(df['avg_rating'] >= 4.0) & (df['install_size'] >= 10_000_000)]

    # Filter last update to January month only
    df_filtered = df_filtered[df_filtered['last_update'].dt.month == 1]

    return df_filtered

# Function to filter by time window (3PM to 5PM IST)
def is_valid_time():
    # Set timezone to IST
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist)
    current_hour = current_time.hour
    return 15 <= current_hour < 17  # 3PM to 5PM IST

# Function to create grouped bar chart
def plot_grouped_bar_chart(df):
    # Filter data based on the criteria
    df_filtered = filter_data(df)

    # Group by category and compute mean rating and total review count
    grouped_data = df_filtered.groupby('category').agg(
        avg_rating=('avg_rating', 'mean'),
        total_review_count=('review_count', 'sum')
    ).reset_index()

    # Sort by total install count and pick top 10 categories
    grouped_data['install_count'] = df_filtered.groupby('category')['install_size'].sum()
    top_10_categories = grouped_data.sort_values(by='install_count', ascending=False).head(10)

    # Plotting
    fig, ax = plt.subplots(figsize=(10, 6))

    # Grouped bar chart
    x = range(len(top_10_categories))
    width = 0.4  # Bar width

    ax.bar(x, top_10_categories['avg_rating'], width, label='Avg Rating', color='b')
    ax.bar([p + width for p in x], top_10_categories['total_review_count'], width, label='Total Review Count', color='g')

    ax.set_xticks([p + width / 2 for p in x])
    ax.set_xticklabels(top_10_categories['category'], rotation=45, ha='right')

    ax.set_xlabel('Category')
    ax.set_ylabel('Value')
    ax.set_title('Top 10 Categories by Install Count (Avg Rating & Total Review Count)')
    ax.legend()

    plt.tight_layout()
    plt.show()

# Main function to run the logic
def main():
    if is_valid_time():
        # Assuming 'apps_data' is the DataFrame already loaded with the data
        plot_grouped_bar_chart(apps_data)  # You need to replace 'apps_data' with your actual data frame.
    else:
        print("The graph is only available between 3 PM and 5 PM IST.")

# Example: Sample data (you need to replace this with your actual dataset)
apps_data = pd.DataFrame({
    'category': ['Game', 'Social', 'Utility', 'Game', 'Health', 'Game', 'Music', 'Education', 'Finance', 'Productivity'],
    'avg_rating': [4.5, 4.2, 4.1, 4.7, 4.3, 4.8, 4.6, 4.0, 3.9, 4.5],
    'install_size': [100000000, 50000000, 20000000, 80000000, 30000000, 40000000, 50000000, 100000000, 60000000, 70000000],
    'review_count': [1000000, 500000, 200000, 1500000, 300000, 1000000, 250000, 400000, 200000, 350000],
    'last_update': ['2025-01-10', '2025-01-15', '2025-01-25', '2025-01-05', '2025-01-08', '2025-01-20', '2025-01-18', '2025-01-22', '2025-01-30', '2025-01-01']
})

# Run the main function to plot the chart or print message if out of time
main()